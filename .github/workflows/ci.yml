name: cosmo-codi-d builder workflow

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Builder for ${{ matrix.rom }}, with CoDi firmware ${{ matrix.firmware }} - for running on aarch64.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rom: ["android", "gemian", "postmarketos", "sailfish", "ubports"]
        firmware: ["stock-codi", "codios-codi"]
        include:
          - os: ubuntu-latest
            cross: true
            strip: true

          - os: ubuntu-latest
            cross: true
            strip: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Cargo binary caching/installation action
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          version: latest

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-11-15
          target: aarch64-unknown-linux-musl

      - name: Build codid (musl/aarch64) in release mode
        uses: actions-rs/cargo@master
        env:
          CARGO_TARGET_DIR: target/aarch64-unknown-linux-musl/${{ matrix.rom }}/${{ matrix.firmware }}/release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          command: build
          args: --release --all --locked --verbose  --features=${{ matrix.firmware }},${{matrix.rom}} --target=aarch64-unknown-linux-musl
          use-cross: ${{ matrix.cross }}

      - name: Build project (musl/aarch64) in debug mode
        uses: actions-rs/cargo@master
        env:
          CARGO_TARGET_DIR: target/aarch64-unknown-linux-musl/${{ matrix.rom }}/${{ matrix.firmware }}/debug
        with:
          command: build
          args: --all --locked --verbose  --features=${{ matrix.firmware }},${{matrix.rom}} --target=aarch64-unknown-linux-musl
          use-cross: ${{ matrix.cross }}

      - name: 'Install (Cargo) binutils, if its release.'
        if: startsWith(github.ref, 'refs/tags/')
        run:
          cargo install cargo-binutils && rustup component add
          llvm-tools-preview

      - name: Strip the CoDirs image, if its a release
        if: startsWith(github.ref, 'refs/tags/')
        run: cargo strip --release -- --strip-all

      - name: Upload release artifact (daemon)
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: codid-${{ matrix.rom }}--${{ matrix.firmware }}-release
          path: target/aarch64-unknown-linux-musl/${{ matrix.rom }}/${{ matrix.firmware }}/release/aarch64-unknown-linux-musl/release/codid

      - name: Upload debug artifact (daemon)
        uses: actions/upload-artifact@v2
        with:
          name: codid-${{ matrix.rom }}--${{ matrix.firmware }}-debug
          path: target/aarch64-unknown-linux-musl/${{ matrix.rom }}/${{ matrix.firmware }}/release/aarch64-unknown-linux-musl/debug/codid

      - name: Upload release artifact (ctl)
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: codictl-${{ matrix.rom }}-${{ matrix.firmware }}-${{ matrix.target}}-release
          path: target/aarch64-unknown-linux-musl/${{ matrix.rom }}/${{ matrix.firmware }}/release/aarch64-unknown-linux-musl/release/codictl

      - name: Upload debug artifact (ctl)
        uses: actions/upload-artifact@v2
        with:
          name: codictl-${{ matrix.rom }}-${{ matrix.firmware }}-${{ matrix.target}}-debug
          path: target/aarch64-unknown-linux-musl/${{ matrix.rom }}/${{ matrix.firmware }}/release/aarch64-unknown-linux-musl/debug/codictl
